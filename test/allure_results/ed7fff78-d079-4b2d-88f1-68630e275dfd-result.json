{"name": "test_update_profile_picture", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"swal-button swal-button--confirm\">...</button> is not clickable at point (694, 364). Other element would receive the click: <textarea rows=\"8\" placeholder=\"Short bio about you\" class=\"form-control form-control-lg\"></textarea>\n  (Session info: chrome=102.0.5005.61)", "trace": "self = <test_conduit.TestConduit object at 0x0000026C7883A9E0>\n\n    def test_update_profile_picture(self):\n        self.login()\n    \n        settings = WebDriverWait(self.browser, 2).until(\n            EC.presence_of_element_located((By.XPATH, '//a[@href = \"#/settings\"]')))\n        settings.click()\n    \n        profile_pic_field = WebDriverWait(self.browser, 2).until(\n            EC.presence_of_element_located((By.XPATH, '//input[@placeholder=\"URL of profile picture\"]')))\n        profile_pic_original = profile_pic_field.get_attribute(\"value\")\n    \n        profile_pic_field_xpath = '//input[@placeholder=\"URL of profile picture\"]'\n        self.find_and_clear_element(profile_pic_field_xpath).send_keys(test_user[\"profile-pic\"])\n    \n        update_btn = WebDriverWait(self.browser, 2).until(\n            EC.presence_of_element_located((By.XPATH, '//button[@class=\"btn btn-lg btn-primary pull-xs-right\"]')))\n        update_btn.click()\n    \n        confirm_btn = WebDriverWait(self.browser, 2).until(\n            EC.presence_of_element_located((By.XPATH, '//button[@class=\"swal-button swal-button--confirm\"]')))\n        confirm_btn.click()\n    \n        self.click_logged_in_user_name()\n        time.sleep(2)\n    \n        profile_pic = WebDriverWait(self.browser, 5).until(\n            EC.presence_of_element_located((By.XPATH, '//img[@class=\"user-img\"]')))\n    \n        assert profile_pic.get_attribute(\"src\") == (test_user[\"profile-pic\"])\n    \n        # CHANGING PROFILE PICTURE BACK TO ORIGINAL:\n    \n        settings = WebDriverWait(self.browser, 2).until(\n            EC.presence_of_element_located((By.XPATH, '//a[@href = \"#/settings\"]')))\n        settings.click()\n    \n        self.find_and_clear_element(profile_pic_field_xpath).send_keys(profile_pic_original)\n    \n        # update_btn.click()\n        # time.sleep(5)\n        # confirm_btn.click()\n    \n        confirm_btn = WebDriverWait(self.browser, 2).until(\n            EC.presence_of_element_located((By.XPATH, '//button[@class=\"swal-button swal-button--confirm\"]')))\n>       confirm_btn.click()\n\ntest_conduit.py:329: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\nC:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000026C7827C550>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77087A7E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77087A4E+238]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"swal-button swal-button--confirm\">...</button> is not clickable at point (694, 364). Other element would receive the click: <textarea rows=\"8\" placeholder=\"Short bio about you\" class=\"form-control form-control-lg\"></textarea>\nE         (Session info: chrome=102.0.5005.61)\n\nC:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: ElementClickInterceptedException"}, "attachments": [{"name": "log", "source": "0429445c-d1fa-44d5-998a-c9398ed84838-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "4fd783d1-3be2-478a-a9f1-faa0086c18b8-attachment.txt", "type": "text/plain"}], "start": 1654036005343, "stop": 1654036013064, "uuid": "d8e6509b-0e98-4ddf-9479-1b3f31df0b0c", "historyId": "fc21f95b907bb0d6f37676babf248bef", "testCaseId": "d178ef7b9d9daf86e906a24bfec23db4", "fullName": "test_conduit.TestConduit#test_update_profile_picture", "labels": [{"name": "suite", "value": "test_conduit"}, {"name": "subSuite", "value": "TestConduit"}, {"name": "host", "value": "LAPTOP-6T1JIRT3"}, {"name": "thread", "value": "40040-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_conduit"}]}