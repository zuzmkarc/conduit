{"name": "test_import_data_from_file", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//button[@class =\"btn btn-outline-danger btn-sm\"]\"}\n  (Session info: chrome=102.0.5005.61)", "trace": "self = <test_conduit.TestConduit object at 0x0000026C7883A890>\n\n    def test_import_data_from_file(self):\n        self.login()\n        self.click_logged_in_user_name()\n        time.sleep(3)\n    \n        articles_before = WebDriverWait(self.browser, 5).until(\n            EC.presence_of_all_elements_located((By.XPATH, '//div[@class=\"article-preview\"]')))\n        articles_before_length = len(articles_before)\n    \n        new_article_btn = WebDriverWait(self.browser, 2).until(\n            EC.presence_of_element_located((By.XPATH, '//a[@href=\"#/editor\"]')))\n        new_article_btn.click()\n        time.sleep(3)\n    \n        publish_btn = self.browser.find_element_by_xpath('//button[@type=\"submit\"]')\n    \n        new_article_title_xpath = '//input[@placeholder=\"Article Title\"]'\n        new_article_about_xpath = '''//input[@placeholder=\"What's this article about?\"]'''\n        new_article_text_xpath = '//textarea[@placeholder=\"Write your article (in markdown)\"]'\n        new_article_tag_xpath = '//input[@placeholder=\"Enter tags\"]'\n    \n        # with open(\"madardalok.csv\", \"r\", encoding=\"UTF-8\") as csvfile:\n        with open(\"madardalok.csv\", \"r\") as csvfile:\n            csvreader = csv.reader(csvfile, delimiter=\";\")\n            next(csvreader)\n            for row in csvreader:\n                self.find_and_clear_element(new_article_title_xpath).send_keys(row[0])\n                self.find_and_clear_element(new_article_about_xpath).send_keys(row[1])\n                self.find_and_clear_element(new_article_text_xpath).send_keys(row[2])\n                self.find_and_clear_element(new_article_tag_xpath).send_keys(row[3])\n                publish_btn.click()\n                new_article_btn.click()\n    \n        time.sleep(3)\n    \n        self.click_logged_in_user_name()\n        time.sleep(3)\n    \n        articles_after = WebDriverWait(self.browser, 5).until(\n            EC.presence_of_all_elements_located((By.XPATH, '//div[@class=\"article-preview\"]')))\n        articles_after_length = len(articles_after)\n        time.sleep(3)\n    \n        assert articles_after_length - 4 == articles_before_length\n    \n        # DELETE NEWLY CREATED ARTICLES TO RESTORE ORIGINS:\n    \n        article_one = WebDriverWait(self.browser, 5).until(\n            EC.presence_of_element_located((By.XPATH, '//a[@href=\"#/articles/a-feketerig-neke\"]')))\n    \n        article_one.click()\n>       delete_article_btn = self.browser.find_element_by_xpath('//button[@class =\"btn btn-outline-danger btn-sm\"]')\n\ntest_conduit.py:258: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:394: in find_element_by_xpath\n    return self.find_element(by=By.XPATH, value=xpath)\nC:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:976: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\nC:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000026C788B1390>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77087A7E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77087A4E+238]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//button[@class =\"btn btn-outline-danger btn-sm\"]\"}\nE         (Session info: chrome=102.0.5005.61)\n\nC:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchElementException"}, "attachments": [{"name": "log", "source": "8b20c5ba-ba40-428d-a87f-fcf7b136a694-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "f3fdf314-a146-4823-b3e1-b48ff68b41e8-attachment.txt", "type": "text/plain"}], "start": 1654035980079, "stop": 1654035999171, "uuid": "90f66c58-4311-4732-99b5-74a2d7a1ff9e", "historyId": "44bf8f89941f1f4992709c3dfc8c7c28", "testCaseId": "91b3870f154924df70e554c02260f4b7", "fullName": "test_conduit.TestConduit#test_import_data_from_file", "labels": [{"name": "suite", "value": "test_conduit"}, {"name": "subSuite", "value": "TestConduit"}, {"name": "host", "value": "LAPTOP-6T1JIRT3"}, {"name": "thread", "value": "40040-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_conduit"}]}